pipeline {
    agent { label ('JAVA_17') }
    stages {
        stage('VCS') {
            steps {
                git url: 'https://github.com/avsrpavankalyan/spring-petclinic.git',
                    branch: 'main'
            }
        }
        stage('MVN PACKAGE') {
            steps {
                sh './mvnw package'
            }  
        }
        stage('ARTIFACTORY JFROG') {
            steps {
                rtServer (
                    id: "ARTIFACTORY_SERVER",
                    url: 'https://kalyankr32.jfrog.io/',
                    credentialsId: 'JFROG_CREDENTIALS'
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )
        }
        stage('SONAR QUBE') {
            steps {
                // performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
                withSonarQubeEnv('SonarQube_kalyanKR') {
                    sh './mvnw clean package sonar:sonar -Dsonar.organization=avsrpkalyanKR_SonarkQubeavankalyan -Dsonar.projectkey=kalyanKR_SonarkQube'
                }
            }
        }
    }
}
