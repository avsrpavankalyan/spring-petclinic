pipeline {
    agent { label ('JAVA_17') }
    stages {
        stage(VCS) {
            steps {
                git url: 'https://github.com/avsrpavankalyan/spring-petclinic.git',
                    branch: 'build'
            }
        }
        stage(BUILD) {
            steps {
                sh './mvnw package'
            }
        }
        stage(snoarcloud) {
            steps {
                sh './mvnw clean verify sonar:sonar \
                -Dsonar.login=9d979eceb08f4ed903213f4b311a340af84bdf36 \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=sonar-cloud-org \
                -Dsonar.projectKey=sonar-cloud-org_project'
            }
        }
        stage(jfrog) {
            steps {
                rtServer (
                    id: "ARTIFACTORY_SERVER",
                    url: 'https://jfrogjenkinstask.jfrog.io//artifactory',
                    credentialsId: 'Jfrog_ID'
                )
                 rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )
                 rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )
            }
        }
        stage(package) {
            steps {
                 tools {
                     jdk 'JDK_17_VERSION'
            }
                rtMavenRun (
                    tool: 'MAVEN_VERSION_3.9.0',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPLOYER",
                    resolverId: "MAVEN_RESOLVER"
                )
            }
        }
    }
}